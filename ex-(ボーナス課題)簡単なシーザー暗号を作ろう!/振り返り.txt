※次からは利便性を考慮してメソッド化します！！

Stringは一度作ったら変えられないけど
StringBuilderは一つの箱を用意して
欲しいものをそこに追加できる

Characterクラスはcharに関する機能を提供してくれます
Character.upperCase()など,,,,,

char[] upperChars = sb.toString().toCharArray();
StringBuilderはString型じゃないのでsb.toString()します!
String型になったので.toCharArrayします
これは文字列を分解して1文字ずつchar[]配列にします

char[] upperChars = null;
共通で使えるように外で宣言(null)
この時点ではインスタンスは作成されていない
じゃあどこでインスタンスが作られてるか
char[] upperChars = sb.toString().toCharArray();
newをしていないけど、toCharArray()がchar[]を自動的に作ってくれてる

for (int i = 0; i < alpha.length(); i++) {
    char c = alpha.charAt(i);
    if (Character.isUpperCase(c)) {
        sb.append(c);
    }
}
char c = alpha.charAt(i)で
String型のalphaのi番目をcに代入してる
for文が回るのでsbにcをappendしてる

upperChars[i] = (char) ('A' + (upperChars[i] - 'A' + num) % 26);
26文字ループのために(upperChars[i] - 'A' + num) % 26
文字として機能させるために'A'

upperChars[i] = (char) ('A' + (upperChars[i] - 'A' - num + 26) % 26);
numがデカい数字だったら負の数になっちゃうので+26しとく